package guiConnect4;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Connect4GUI extends JFrame{
	
	JFrame frame;
	JPanel panel;
	Player player1;
	Player player2;
	Player currPlayer;
	Connect4GUI c4Board;
	ScoreBoard scoreBoard;
	
	final int rowTiles = 6;
	final int colTiles = 7;
	static int [][] grid = new int [6][7];
	int row, col, rowSelected, colSelected = 0;
	int pTurn = 0;
	boolean win = false;
	
	JButton[][] button = new JButton[rowTiles][colTiles];
	JButton clear;
	JLabel whoWon;
	GridLayout myGrid = new GridLayout(6,7);
	
	final ImageIcon c0 = new ImageIcon("p0.png");
	final ImageIcon c1 = new ImageIcon("p1.png");
	final ImageIcon c2 = new ImageIcon("p2.png");

	
	public Connect4GUI(){
		frame = new JFrame();
		frame.setLayout(new BorderLayout());
		panel = new JPanel();
		panel.setLayout(myGrid); new JPanel();
		whoWon = new JLabel("");
		clear = new JButton("Clear");
		clear.addActionListener(new clearListener());
		clear.setPreferredSize(new Dimension (10,10));
		
		for (int x = rowTiles - 2; x >= 0; x--) {
			for (int y = colTiles - 1; y >= 0; y--) {
				grid[x][y] = -1;
			}
		}
		
		for (row = 0; row <= rowTiles -1; row++) {
			for (col = 0; col <= colTiles - 1; col++) {
				button[row][col] = new JButton(c0);
				button[row][col].addActionListener(new buttonListener());
				panel.add(button[row][col]);

			}
		}
		
		player1 = new Player("Aaron", "A");
		player2 = new Player("Medero", "M");
		currPlayer = player1;
		
		//c4Board = new Connect4GUI();//game gets played in here
		scoreBoard = new ScoreBoard();
		
		
		panel.add(scoreBoard, BorderLayout.NORTH);
		panel.add(c4Board, BorderLayout.CENTER);
		panel.add(whoWon);
		panel.add(clear);
		frame.add(panel);
		add(frame);
//		setSize(500,500);
		pack();
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setVisible(true);
		
	}
	
	class ScoreBoard extends JPanel{
		private JLabel lblChamp, lblLatestWinner,
		lblPlaceHolder, lblPlayerNames, lblPlayerNumWins,
		lblPlayer1Name,lblPlayer2Name,
		lblPlayer1NumWins,lblPlayer2NumWins;
		JPanel jpGenScoreInfo, jpPlayerScoreInfo;
		
		public ScoreBoard(){
			setLayout(new BorderLayout());
			jpGenScoreInfo = new JPanel();
			jpGenScoreInfo.setLayout(new GridLayout(1,2));
			jpGenScoreInfo.setBackground(Color.YELLOW);
			lblChamp = new JLabel("CHAMP");
			lblLatestWinner = new JLabel("*****");
			jpGenScoreInfo.add(lblChamp);
			jpGenScoreInfo.add(lblLatestWinner);
			
			jpPlayerScoreInfo = new JPanel();
			jpPlayerScoreInfo.setLayout(new GridLayout(3,3));
			jpPlayerScoreInfo.setBackground(Color.CYAN);
			lblPlaceHolder = new JLabel(" ");
			lblPlayerNames  = new JLabel("NAME");
			lblPlayerNumWins = new JLabel("NUM WINS");
			lblPlayer1Name = new JLabel(player1.getName());
			lblPlayer2Name = new JLabel(player2.getName());
			lblPlayer1NumWins = new JLabel(""+player1.getNumWins());
			lblPlayer2NumWins = new JLabel(""+player2.getNumWins());

			jpPlayerScoreInfo.add(lblPlaceHolder);//00
			jpPlayerScoreInfo.add(new JLabel("Player 1"));//01
			jpPlayerScoreInfo.add(new JLabel("Player 2"));//02
			jpPlayerScoreInfo.add(lblPlayerNames);//10
			jpPlayerScoreInfo.add(lblPlayer1Name);//11
			jpPlayerScoreInfo.add(lblPlayer2Name);//12
			jpPlayerScoreInfo.add(lblPlayerNumWins);//20
			jpPlayerScoreInfo.add(lblPlayer1NumWins);
			jpPlayerScoreInfo.add(lblPlayer2NumWins);
			
			add(jpGenScoreInfo, BorderLayout.NORTH);
			add(jpPlayerScoreInfo, BorderLayout.CENTER);
		}
	}//end of ScoreBoard
	
class buttonListener implements ActionListener {
	public void actionPerformed(ActionEvent event) {
		for (row = rowTiles-1; row >= 0; row--) {
			for (col = colTiles -1; col >= 0; col--) {
				if (button[row][col] == event.getSource()) {
					if (pTurn % 2 == 0 && grid[row][col] == 0) {
						button[row][col].setIcon(c1);
						grid[row][col]=1;
						grid[row-1][col] = 0;
						pTurn = pTurn + 1;
						if (checkWin()) {
							System.out.println("WIN");
							whoWon.setText("Player 1 wins");
							for (int x = 0; row <= rowTiles - 1;x++) {
								for (int y = 0; y <= colTiles - 1; y++) {
									grid[x][y] = -1;
								}
							}
						}
						System.out.println(row + "," + col);
						break;
					}
					else {
						System.out.println("Unable To Move");
					}
				}
			}
		}
	}
}

	public boolean checkWin() { 
		//Vertical Check
		for(int x = 0; x<6; x++) {
			for (int y = 0; y<7; y++) {
				if (grid[x][y] != 0 && grid[x][y] != -1 &&
					grid[x][y] == grid[x][y+1] &&
					grid[x][y] == grid[x][y+2] &&
					grid[x][y] == grid[x][y+3]) {
					win = true;
				}
			}
			//Horizontal Check`
		for (int x=0)	
			if (grid[x][y] != 0 && grid[x][y] != -1 &&
			grid[x][y] == grid[x+1][y] &&
			grid[x][y] == grid[x+2][y] &&
			grid[x][y] == grid[x+3][y]) {
				
			win = true;
		}
	}
		@Override
		public void actionPerformed(ActionEvent arg0) {
			
			}
			
			
			// TODO Auto-generated method stub
			
		}
		
	}
	
	
	
	class c4Board extends JPanel implements GameBoardInterface, ActionListener {
		private JButton [][] board;
		private static final int NUM_ROWS = 3;
		private static final int NUM_COLS = 3;
		
		public c4Board(){
			setLayout(new GridLayout(3,3));
			displayBoard();
			
		}

		@Override
		public void clearBoard() {
			for(int row=0; row<board.length; row++){
				for(int col=0; col<board[row].length; col++){
					board[row][col].setText("");
					board[row][col].setEnabled(true);
				}
			}
		}

		@Override
		public void displayBoard() {
			board = new JButton[6][7];//initialize 2D array to 6x7 for c4
			for(int row=0; row<board.length; row++){
				for(int col=0; col<board[row].length; col++){
//					board[row][col] = new JButton("["+row+"]["+col+"]");
					board[row][col] = new JButton();
					Font bigF = new Font(Font.SANS_SERIF, Font.BOLD, 30);
					board[row][col].setFont(bigF);
					board[row][col].addActionListener(this);//listen for clicks
					board[row][col].setEnabled(true);//enable
					add(board[row][col]);
				}
			}
			
		}

		@Override
		public void populateBoard() {
			
			
		}

		@Override
		public void takeTurn() {
			if(currPlayer.equals(player1)){
				currPlayer = player2;
			}
			else{
				currPlayer = player1;
			}
		}

		@Override
		public void displayWinner() {
			JOptionPane.showMessageDialog(null, "WINNER! " + currPlayer.getName());
			//currPlayer.addWin();
			scoreBoard.lblLatestWinner.setText(currPlayer.getName());
			if(currPlayer.equals(player1)){
				scoreBoard.lblPlayer1NumWins.setText(""+player1.getNumWins());
			}
			else{
				scoreBoard.lblPlayer2NumWins.setText(""+player2.getNumWins());
			}
			
			
			//will also update labels eventually
		}

		@Override
		public boolean isFull() {
			//iterate through all cells
			for(int row=0; row<board.length; row++){
				for(int col=0; col<board[row].length; col++){
					if(board[row][col].getText().equals("")){
						return false; //if any are empty return false
					}
				}
			}
			return true;
		}

		@Override
		public boolean isEmpty() {
			 {
				
			}
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean isWinner(String currPlayerSymbol) {
			if(isWinnerInRow() || isWinnerInCol() ){
				return true;
			}
			
			//Methods for 
			
			
			return false;
		}

		@Override
		public boolean isDraw() {
			// TODO Auto-generated method stub
			//if isFull() && !isWinner() return true
			return false;
		}

		public boolean isWinnerInRow(){
			for(int row=0; row<board.length; row++){
				int numMatchesInRow = 0;
				for(int col=0; col<board[row].length; col++){
					if(board[row][col].getText().equals(currPlayer.getSymbol())){
						numMatchesInRow++;
						if(numMatchesInRow == 3){
							return true;
						}
					}
				}
			}
			return false;
		}
		public boolean isWinnerInCol(){
			for(int col=0; col<NUM_COLS; col++){
			int numMatchesInCol = 0;
			for(int row=0; row<board.length; row++){
					if(board[row][col].getText().equals(currPlayer.getSymbol())){
						numMatchesInCol++;
						if(numMatchesInCol == 3){
							return true;
						}
					}
				}
			}
			return false;
		}
		public boolean isWinnerInMainDiag(){
			return false;
		}
		public boolean isWinnerInSecondDiag(){
			return false;
		}
		
		@Override
		public void actionPerformed(ActionEvent e) {
			//e.getActionCommand()   e.getSource()
			JButton btnClicked = (JButton)e.getSource();
			btnClicked.setText(currPlayer.getSymbol());//set the symbol on the button
			btnClicked.setEnabled(false);//disable
			//isWinner
			if(isWinner(currPlayer.getSymbol())){
				displayWinner();
				clearBoard();
			}
			else if(isFull()){
				JOptionPane.showMessageDialog(null, "DRAW");
				clearBoard();
			}
			
			takeTurn();
		}//end of actionPerformed
		
		
		
		
	}

	public void run() {
		// TODO Auto-generated method stub
		
	}
	
	
	
	

}
